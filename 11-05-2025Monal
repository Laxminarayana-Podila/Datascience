{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8fb374bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. init\n",
    "\n",
    "class Person:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "    \n",
    "    def print_var(self):\n",
    "        print(self.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a3c7ffb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_init = Person(\"Monal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67a1c9cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Monal\n"
     ]
    }
   ],
   "source": [
    "p_init.print_var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5106e72f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. str\n",
    "\n",
    "class Person:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "        \n",
    "    \n",
    "    def __str__(self):\n",
    "        return f\"Person object has these values : {self.name}\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d23f8623",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_str = Person(\"Monal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a5edc41d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person object has these values : Monal\n"
     ]
    }
   ],
   "source": [
    "print(p_str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d8bcf25c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person object has these values : Monal\n"
     ]
    }
   ],
   "source": [
    "print(p_str.__str__())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f865ad4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. repr : formal developer focused string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "76577a3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Person:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return f\"Person('{self.name}')\"\n",
    "    \n",
    "    def __str__(self):\n",
    "        return f\"Person object has these values : {self.name}\"\n",
    "    \n",
    "    def add(self, a, b):\n",
    "        print(a+b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9bf73f97",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_repr = Person(\"Monal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "799065ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person object has these values : Monal\n"
     ]
    }
   ],
   "source": [
    "print(p_repr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ad3575b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person object has these values : Monal\n"
     ]
    }
   ],
   "source": [
    "print(p_repr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f7eb1626",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Abcd:\n",
    "    def __init__(self):\n",
    "        self.hello = \"hello world\"\n",
    "\n",
    "    def get_class_invocation(self, obj):\n",
    "        print(repr(obj))\n",
    "\n",
    "    def get_addition_obj_and_perform(self, obj, val1, val2):\n",
    "        obj.add(val1, val2)\n",
    "    \n",
    "    def a(self):\n",
    "        print(\"Dummy\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "07f5e4ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = Abcd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "8c6bd48a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dummy\n"
     ]
    }
   ],
   "source": [
    "a.a()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "94b16fa1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "a.get_addition_obj_and_perform(p_repr, 1, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ecc4f906",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person('Monal')\n"
     ]
    }
   ],
   "source": [
    "a.get_class_invocation(p_repr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1f9f68d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'r' is not recognized as an internal or external command,\n",
      "operable program or batch file.\n"
     ]
    }
   ],
   "source": [
    "# 4. add\n",
    "\n",
    "class NewAdd:\n",
    "    def __init__(self, x, y):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f\"NewAdd({self.x}, {self.y})\"\n",
    "    !r ?\n",
    "    \n",
    "    def __add__(self, other):\n",
    "        return (self.x+other.x, self.y+other.y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "63833bc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_add_1 = NewAdd(100, 200)\n",
    "p_add_2 = NewAdd(100, 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "705bddee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200, 400)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_add_1 + p_add_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "aef303bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. eq\n",
    "\n",
    "class NewAdd:\n",
    "    def __init__(self, x, y):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f\"NewAdd({self.x}, {self.y})\"\n",
    "    \n",
    "    def __eq__(self, other):\n",
    "        return self.x == other.x and self.y == other.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3066e3ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_add_1 = NewAdd(100, 200)\n",
    "p_add_2 = NewAdd(100, 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "fa4a6066",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_add_1 == p_add_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "50c17901",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_add_1 = NewAdd(101, 200)\n",
    "p_add_2 = NewAdd(100, 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ff40d6a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_add_1 == p_add_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e4ca861a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  6. len(self)\n",
    "\n",
    "class Values:\n",
    "    def __init__(self, items):\n",
    "        self.items = items\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.items)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "204b6c41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [1,2,3,4,5,6]\n",
    "\n",
    "len(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8228db5e",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "object of type 'NewAdd' has no len()",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mTypeError\u001b[39m                                 Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[76]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m a_new_add = NewAdd(\u001b[32m1\u001b[39m,\u001b[32m2\u001b[39m)\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m \u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43ma_new_add\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[31mTypeError\u001b[39m: object of type 'NewAdd' has no len()"
     ]
    }
   ],
   "source": [
    "a_new_add = NewAdd(1,2)\n",
    "len(a_new_add)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "a8d7ff19",
   "metadata": {},
   "outputs": [],
   "source": [
    "value_special = Values([1,2,3,4,5,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "9cc5b87e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(value_special)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "18400d01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 7. getitem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "74587b1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [1,2,3,4,5,6]\n",
    "a[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "a3e4f8e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Values:\n",
    "    def __init__(self, items):\n",
    "        self.items = items\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        return self.items[index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ee35fe44",
   "metadata": {},
   "outputs": [],
   "source": [
    "get_item_s = Values([1,2,3,4,5,6,7,8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "b81569cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_item_s[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c61b190c",
   "metadata": {},
   "source": [
    "# Other special methods\n",
    "\n",
    "\n",
    "| Operator | Method        | Reverse Version | Description                           |\n",
    "| -------- | ------------- | --------------- | ------------------------------------- |\n",
    "| `+`      | `__add__`     | `__radd__`      | Addition                              |\n",
    "| `-`      | `__sub__`     | `__rsub__`      | Subtraction                           |\n",
    "| `*`      | `__mul__`     | `__rmul__`      | Multiplication (scalar, element-wise) |\n",
    "| `/`      | `__truediv__` | `__rtruediv__`  | True Division                         |\n",
    "| `==`     | `__eq__`      |                 | Equality                              |\n",
    "| `str()`  | `__str__`     |                 | String Representation                 |\n",
    "| `repr()` | `__repr__`    |                 | Developer-readable representation     |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f32f32f",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
